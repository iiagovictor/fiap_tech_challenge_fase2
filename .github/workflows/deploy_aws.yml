name: '2 - [PROD] Deploy Infra AWS'

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python_version: ${{ steps.vars.outputs.python_version }}
      aws_region: ${{ steps.vars.outputs.aws_region }}
      aws_account_id: ${{ steps.vars.outputs.aws_account_id }}
      s3_bucket: ${{ steps.vars.outputs.s3_bucket }}
      s3_key: ${{ steps.vars.outputs.s3_key }}
      backend_region: ${{ steps.vars.outputs.backend_region }}
      tf_destroy: ${{ steps.vars.outputs.tf_destroy }}
      has_lambda: ${{ steps.check_lambda.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if lambda.tf exists
        id: check_lambda
        run: |
          if [ -f "infra/lambda.tf" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ lambda.tf found - Lambda build will be executed"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  lambda.tf not found - Lambda build will be skipped"
          fi

      - name: Install yq and read config.yaml variables
        id: vars
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          echo "python_version=$(yq '.setup.python_version // "3.11"' config.yaml)" >> $GITHUB_OUTPUT
          echo "aws_region=$(yq '.aws.region' config.yaml)" >> $GITHUB_OUTPUT
          echo "aws_account_id=$(yq '.terraform.backend.account_id' config.yaml)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(yq '.terraform.backend.s3_bucket' config.yaml)" >> $GITHUB_OUTPUT
          echo "s3_key=$(yq '.terraform.backend.key' config.yaml)" >> $GITHUB_OUTPUT
          echo "backend_region=$(yq '.terraform.backend.region // .aws.region' config.yaml)" >> $GITHUB_OUTPUT
          echo "tf_destroy=$(yq '.terraform.destroy' config.yaml)" >> $GITHUB_OUTPUT

      - name: Validate required variables
        run: |
          EXIT_CODE=0
          
          if [ -z "${{ steps.vars.outputs.python_version }}" ]; then
            echo "‚ùå Error: python_version is required"
            EXIT_CODE=1
          else
            echo "‚úÖ python_version: ${{ steps.vars.outputs.python_version }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.aws_region }}" ]; then
            echo "‚ùå Error: aws_region is required"
            EXIT_CODE=1
          else
            echo "‚úÖ aws_region: ${{ steps.vars.outputs.aws_region }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.aws_account_id }}" ]; then
            echo "‚ùå Error: terraform.backend.account_id is required"
            EXIT_CODE=1
          else
            echo "‚úÖ aws_account_id: ${{ steps.vars.outputs.aws_account_id }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.s3_bucket }}" ]; then
            echo "‚ùå Error: terraform.backend.s3_bucket is required"
            EXIT_CODE=1
          else
            echo "‚úÖ s3_bucket: ${{ steps.vars.outputs.s3_bucket }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.s3_key }}" ]; then
            echo "‚ùå Error: terraform.backend.key is required"
            EXIT_CODE=1
          else
            echo "‚úÖ s3_key: ${{ steps.vars.outputs.s3_key }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.backend_region }}" ]; then
            echo "‚ùå Error: terraform.backend.region is required"
            EXIT_CODE=1
          else
            echo "‚úÖ backend_region: ${{ steps.vars.outputs.backend_region }}"
          fi
          
          if [ -z "${{ steps.vars.outputs.tf_destroy }}" ]; then
            echo "‚ö†Ô∏è  Warning: terraform.destroy not set, defaulting to false"
            echo "tf_destroy=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ tf_destroy: ${{ steps.vars.outputs.tf_destroy }}"
          fi
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Validation failed! Please check your config.yaml file."
            exit 1
          fi
          
          echo ""
          echo "‚úÖ All required variables validated successfully!"

  build_lambda:
    needs: setup
    if: ${{ needs.setup.outputs.has_lambda == 'true' && needs.setup.outputs.tf_destroy != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python_version }}

      - name: Validate Lambda structure
        run: |
          EXIT_CODE=0
          
          echo "üîç Validating Lambda structure..."
          
          if [ ! -d "app/lambda" ]; then
            echo "‚ùå Error: app/lambda directory not found"
            EXIT_CODE=1
          fi
          
          if [ ! "$(find app/lambda -maxdepth 1 -name '*.py' -type f)" ]; then
            echo "‚ùå Error: No Python files (.py) found in app/lambda/"
            EXIT_CODE=1
          else
            echo "‚úÖ Python files found:"
            find app/lambda -maxdepth 1 -name '*.py' -type f -exec basename {} \;
          fi
          
          if [ ! -f "app/lambda/requirements.txt" ]; then
            echo "‚ùå Error: requirements.txt not found in app/lambda/"
            EXIT_CODE=1
          else
            echo "‚úÖ requirements.txt found"
            echo "üì¶ Dependencies to install:"
            cat app/lambda/requirements.txt
          fi
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Lambda validation failed! Please ensure:"
            echo "   1. app/lambda/ directory exists"
            echo "   2. At least one .py file exists in app/lambda/"
            echo "   3. requirements.txt exists in app/lambda/"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Lambda structure validated successfully!"

      - name: Install Lambda dependencies
        run: |
          cd app/lambda
          
          echo "üîß Installing Lambda dependencies..."
          
          find . -type d -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          
          pip install -r requirements.txt -t . --upgrade --no-cache-dir
          
          echo "‚úÖ Lambda dependencies installed successfully!"
          echo ""
          echo "üì¶ Installed packages:"
          ls -1 | grep -v "\.py$\|requirements\.txt\|\.zip$" | head -10

      - name: Create Lambda deployment package
        run: |
          cd app/lambda
          
          echo "üì¶ Creating Lambda deployment package..."
          
          rm -f main.zip
          
          zip -r main.zip . -x "*.pyc" "__pycache__/*" "*.dist-info/*" "*.egg-info/*"
          
          echo "‚úÖ Lambda deployment package created: main.zip"
          echo "üìä Package size: $(du -h main.zip | cut -f1)"

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: app/lambda/main.zip
          retention-days: 1

  terraform_apply:
    needs: [setup, build_lambda]
    if: ${{ always() && needs.setup.outputs.tf_destroy != 'true' && (needs.build_lambda.result == 'success' || needs.build_lambda.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.setup.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Lambda artifact
        if: ${{ needs.setup.outputs.has_lambda == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: app/lambda/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python_version }}

      - name: Create S3 Backend Bucket if not exists
        run: |
          BUCKET_NAME="${{ needs.setup.outputs.s3_bucket }}"
          REGION="${{ needs.setup.outputs.backend_region }}"
          
          echo "üîç Checking if bucket $BUCKET_NAME exists..."
          
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "üì¶ Bucket does not exist. Creating..."
            
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
            
            echo "üîê Enabling versioning..."
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            
            echo "üîí Enabling encryption..."
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [{
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }]
              }'
            
            echo "üö´ Blocking public access..."
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" \
              --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            echo "‚úÖ Bucket $BUCKET_NAME created and configured successfully!"
          else
            echo "‚úÖ Bucket $BUCKET_NAME already exists"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Terraform Backend Configuration
        run: |
          cd infra
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket  = "${{ needs.setup.outputs.s3_bucket }}"
              key     = "${{ needs.setup.outputs.s3_key }}"
              region  = "${{ needs.setup.outputs.backend_region }}"
              encrypt = true
            }
          }
          EOF
          echo "‚úÖ backend.tf created successfully"
          cat backend.tf

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -input=false \
            -var-file="inventories/prod.tfvars" \
            -var="aws_region=${{ needs.setup.outputs.aws_region }}"

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve -input=false \
            -var-file="inventories/prod.tfvars" \
            -var="aws_region=${{ needs.setup.outputs.aws_region }}"

  terraform_destroy:
    needs: setup
    if: ${{ needs.setup.outputs.tf_destroy == 'true' }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.setup.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python_version }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Terraform Backend Configuration
        run: |
          cd infra
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket  = "${{ needs.setup.outputs.s3_bucket }}"
              key     = "${{ needs.setup.outputs.s3_key }}"
              region  = "${{ needs.setup.outputs.backend_region }}"
              encrypt = true
            }
          }
          EOF
          echo "‚úÖ backend.tf created successfully"

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Plan (Destroy)
        run: |
          cd infra
          terraform plan -destroy -input=false \
            -var-file="inventories/prod.tfvars" \
            -var="aws_region=${{ needs.setup.outputs.aws_region }}"

      - name: Terraform Destroy
        run: |
          cd infra
          terraform destroy -auto-approve -input=false \
            -var-file="inventories/prod.tfvars" \
            -var="aws_region=${{ needs.setup.outputs.aws_region }}"