name: '[PROD] Deploy Infra AWS'

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python_version: ${{ steps.vars.outputs.python_version }}
      aws_region: ${{ steps.vars.outputs.aws_region }}
      aws_account_id: ${{ steps.vars.outputs.aws_account_id }}
      s3_bucket: ${{ steps.vars.outputs.s3_bucket }}
      s3_key: ${{ steps.vars.outputs.s3_key }}
      backend_region: ${{ steps.vars.outputs.backend_region }}
      tf_auto_approve: ${{ steps.vars.outputs.tf_auto_approve }}
      tf_destroy: ${{ steps.vars.outputs.tf_destroy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq and read config.yaml variables
        id: vars
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          echo "python_version=$(yq '.setup.python_version // "3.11"' config.yaml)" >> $GITHUB_OUTPUT
          # Região principal
          echo "aws_region=$(yq '.aws.region' config.yaml)" >> $GITHUB_OUTPUT
          # Backend (correção: terraform em vez de tarraform)
          echo "aws_account_id=$(yq '.terraform.backend.account_id' config.yaml)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(yq '.terraform.backend.s3_bucket' config.yaml)" >> $GITHUB_OUTPUT
          echo "s3_key=$(yq '.terraform.backend.key' config.yaml)" >> $GITHUB_OUTPUT
          echo "backend_region=$(yq '.terraform.backend.region // .aws.region' config.yaml)" >> $GITHUB_OUTPUT
          # Flags de execução
          echo "tf_auto_approve=$(yq '.terraform.auto_approve' config.yaml)" >> $GITHUB_OUTPUT
          echo "tf_destroy=$(yq '.terraform.destroy' config.yaml)" >> $GITHUB_OUTPUT

      - name: Validate required variables
        run: |
          if [ -z "${{ steps.vars.outputs.aws_region }}" ]; then
            echo "❌ Error: aws_region is required"
            exit 1
          fi
          if [ -z "${{ steps.vars.outputs.s3_bucket }}" ]; then
            echo "❌ Error: s3_bucket is required"
            exit 1
          fi
          if [ -z "${{ steps.vars.outputs.s3_key }}" ]; then
            echo "❌ Error: s3_key is required"
            exit 1
          fi
          echo "✅ All required variables validated"

  terraform_apply:
    needs: setup
    if: ${{ needs.setup.outputs.tf_destroy != 'true' }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.setup.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python_version }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ needs.setup.outputs.s3_bucket }}" \
            -backend-config="key=${{ needs.setup.outputs.s3_key }}" \
            -backend-config="region=${{ needs.setup.outputs.backend_region }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -input=false -var="aws_region=${{ needs.setup.outputs.aws_region }}"

      - name: Terraform Apply
        run: |
          cd infra
          if [ "${{ needs.setup.outputs.tf_auto_approve }}" = "true" ]; then
            terraform apply -auto-approve -input=false -var="aws_region=${{ needs.setup.outputs.aws_region }}"
          else
            terraform apply -input=false -var="aws_region=${{ needs.setup.outputs.aws_region }}"
          fi

  terraform_destroy:
    needs: setup
    if: ${{ needs.setup.outputs.tf_destroy == 'true' }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.setup.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python_version }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ needs.setup.outputs.s3_bucket }}" \
            -backend-config="key=${{ needs.setup.outputs.s3_key }}" \
            -backend-config="region=${{ needs.setup.outputs.backend_region }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan (Destroy)
        run: |
          cd infra
          terraform plan -destroy -input=false -var="aws_region=${{ needs.setup.outputs.aws_region }}"

      - name: Terraform Destroy
        run: |
          cd infra
          terraform destroy -auto-approve -input=false -var="aws_region=${{ needs.setup.outputs.aws_region }}"